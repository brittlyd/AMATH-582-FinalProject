clear all, close all
%% Setup
%Choose if doing plain PCA or rPCA and with uv or with vmag
plain=1; %1 for plain PCA 0 for rPCA
uv=1; %1 for uv and 0 for vmag
workingfolder= 'C:\Users\abber\Documents\School\Grad School\Winter 20\AMATH 582\Project';
chord=4.06*10; %chord length in mm

if plain
t=0; %truncation
run='Abby'; %what to append to all plot saving so things don't get overwritten between data sets
%load data
load(fullfile(workingfolder,'up1_1 Crop.mat'))
rotFields = fieldnames(data);
nRot = length(rotFields);
%prep for PCA
nx = 52; %size of the cropped fields that go into the SVD
ny = 52;
if uv
Y = zeros(nx*ny*2, nRot);
else
Y = zeros(nx*ny, nRot);
end
xcrop=data.(rotFields{1}).interp.xcrop;
ycrop=data.(rotFields{1}).interp.ycrop;
end

%% rPCA
if ~plain
t=2; %truncation
run='AbbyRPCA'; %what to append to all plot saving so things don't get overwritten between data sets

% load data, initialize
load(fullfile(workingfolder,'up1_1FULL.mat'))
rotFields = fieldnames(up1_1FULL);
nRot = length(rotFields);
%prep for PCA
nx = 52; %size of the cropped fields that go into the SVD
ny = 52;
if uv
Y = zeros(nx*ny*2, nRot);
else
Y = zeros(nx*ny, nRot);
end

% keep these variables outside loop if same for all rotations
nxFull = up1_1FULL.deg_30.nx; 
nyFull = up1_1FULL.deg_30.ny;

for iRot = 1:nRot
    u = up1_1FULL.(rotFields{iRot}).u;
    v = up1_1FULL.(rotFields{iRot}).v;
    mask_ind = up1_1FULL.(rotFields{iRot}).mask_inds;
    lambda = 5; % choose your sparsity constant value (1 is often a good starting point)
    tol = 1e-7; % set your tolerance
    maxIter = 1000; % set your maximum number of iterations
    if iRot>(7+t)
        fl=1; %because of data rotation we need to flip the mask left to right
    else
        fl=0;
    end
    [up1_1FULL.(rotFields{iRot}).L, up1_1FULL.(rotFields{iRot}).N,mask_log(:,:,iRot)] ... 
        = rPCA_main(u,v,nxFull,nyFull, mask_ind, lambda, tol, maxIter,fl);
    % average all columns of L,N to get "rPCA cleaned" phase average
    up1_1FULL.(rotFields{iRot}).Lr = mean(up1_1FULL.(rotFields{iRot}).L,2);
    up1_1FULL.(rotFields{iRot}).Nr = mean(up1_1FULL.(rotFields{iRot}).N,2);
    % put mask back in
    [up1_1FULL.(rotFields{iRot}).uL,up1_1FULL.(rotFields{iRot}).vL] = ...
        unstackPCA(up1_1FULL.(rotFields{iRot}).Lr,nxFull,nyFull,mask_log(:,:,iRot),1);
    [up1_1FULL.(rotFields{iRot}).uN,up1_1FULL.(rotFields{iRot}).vN] = ...
        unstackPCA(up1_1FULL.(rotFields{iRot}).Nr,nxFull,nyFull,mask_log(:,:,iRot),1);
end
% checks for rPCA
% lambdaCheck(up1_1FULL.deg_30.uL, up1_1FULL.deg_30.vL,up1_1FULL.deg_30.uN...
%     , up1_1FULL.deg_30.vN, lambda)

% save post rPCA structure
save(fullfile(workingfolder,'up1_1FULL rPCA'),'up1_1FULL')

figure
subplot(2,2,1)
pcolor(up1_1FULL.deg_30.u_avg)
title('u avg')
shading flat
caxis([-1.5 2])
colorbar

subplot(2,2,3)
pcolor(up1_1FULL.deg_30.v_avg)
title('v avg')
shading flat
caxis([-1.5 2])
colorbar

fvar=figure;
set(gcf,'position',[635.8571  118.7143  804.5429  601.2857])
%Calculate Variance and plot
k=1;
for iRot=1:4:nRot
    var=mean((up1_1FULL.(rotFields{iRot}).L...
        -mean(up1_1FULL.(rotFields{iRot}).L,2)).^2,2);
    [var_u,var_v] = unstackPCA(var,nxFull,nyFull,mask_log(:,:,iRot),1);
    subplot(2,4,k)
    pcolor(up1_1FULL.(rotFields{iRot}).x/chord,up1_1FULL.(rotFields{iRot}).y/chord...
        ,(var_u/max(var_u,[],'all'))')
    shading flat
    axis equal
    axis tight
    hold on
    plot(up1_1FULL.(rotFields{iRot}).foil,'facecolor',[0 0 0],'facealpha',0.5...
        ,'edgecolor','none')
    title(strcat('\langle u''^2 \rangle, \theta = '...
        , rotFields{iRot}(strfind(rotFields{iRot},'_')+1:end),char(176)))
    subplot(2,4,k+4)
    pcolor(up1_1FULL.(rotFields{iRot}).x/chord,up1_1FULL.(rotFields{iRot}).y/chord...
        ,(var_v/max(var_v,[],'all'))')
    shading flat
    axis equal 
    axis tight
    hold on
    plot(up1_1FULL.(rotFields{iRot}).foil,'facecolor',[0 0 0],'facealpha',0.5...
        ,'edgecolor','none')
    title(strcat('\langle v''^2 \rangle, \theta = '...
        , rotFields{iRot}(strfind(rotFields{iRot},'_')+1:end),char(176)))
    k=k+1;
end
c=colorbar;
set(c,'position',[0.922594666892399,0.109553231939162,0.024493401289418,0.814638783269948])
print(gcf,'rPCA variance','-dpng','-r600')

% Crops data for PCA
DataCrop_rPCA(fullfile(workingfolder,'up1_1FULL rPCA'),t,0)
load(fullfile(workingfolder,'up1_1FULL rPCA Crop.mat'))
rotFields = fieldnames(data);
nRot = length(rotFields);
xcrop=data.(rotFields{1}).interp.xcrop;
ycrop=data.(rotFields{1}).interp.ycrop;
end
%% Form Y matrix

for iRot = 1:nRot
    %Y(:,iRot) = reshape(data.(rotFields{iRot}).Interp.Vort_crop, [nx*ny 1]);
    %Y(:,iRot) = reshape(data.(rotFields{iRot}).InterpCommon.Vmag_crop, [nx*ny 1]);
    if uv
        u = reshape(data.(rotFields{iRot}).interp.u_crop, [nx*ny 1]);
        v = reshape(data.(rotFields{iRot}).interp.v_crop, [nx*ny 1]);
%         figure(3); clf(3)
%         subplot(1,4,4)
%     pcolor(data.(rotFields{iRot}).interp.xcrop...
%         ,data.(rotFields{iRot}).interp.ycrop,data.(rotFields{iRot}).interp.u_crop)
%     hold on
%     plot(data.(rotFields{iRot}).interp.foil)
%     shading flat
%     axis equal
%     axis tight
%     subplot(1,4,3)
%     pcolor(data.(rotFields{iRot}).x/chord...
%         ,data.(rotFields{iRot}).y/chord,data.(rotFields{iRot}).uL')
%     hold on
%     plot(data.(rotFields{iRot}).foil)
%     shading flat
%     axis equal
%     axis tight
%     subplot(1,4,2)
%     pcolor(data.(rotFields{iRot}).x/chord...
%         ,data.(rotFields{iRot}).y/chord,data.(rotFields{iRot}).u_avg')
%     hold on
%     plot(data.(rotFields{iRot}).foil)
%     shading flat
%     axis equal
%     axis tight
%     subplot(1,4,1)
%     pcolor(fliplr(mask_log(:,:,iRot+t)'))
%     hold on
%     plot(data.(rotFields{iRot}).foil)
%     shading flat
%     axis equal
%     axis tight
%     pause(0.5)
        Y(:,iRot) = [u;v];
    else
        Y(:,iRot) = reshape(data.(rotFields{iRot}).interp.vmag_crop, [nx*ny 1]);
    end
end

%% Vel field plotting
if plain
figure
set(gcf,'position',1.0e+03 *[0.0016    0.2079    1.4600    0.5120])
[ha, pos]= tight_subplot(2,4,[0 0],[.01 .01],[.01 .01]);
p=1;
for n=1:ceil(nRot/8):nRot
    axes(ha(p))
    ax=gca;
    tmpU=data.(rotFields{n}).interp.u_crop;
    tmpV=data.(rotFields{n}).interp.v_crop;
    tmpVmag=data.(rotFields{n}).interp.vmag_crop;
    pcolor(data.(rotFields{n}).interp.xcrop,data.(rotFields{n}).interp.ycrop,tmpVmag)
    hold on
    quiver(data.(rotFields{n}).interp.xcrop,data.(rotFields{n}).interp.ycrop,tmpU,tmpV,2,'k')
    plot(data.(rotFields{n}).interp.foil,'facecolor',[0 0 0],'facealpha',0.5...
        ,'edgecolor','none')
    ax.XAxis.Visible='off';
    ax.YAxis.Visible='off';
    title(strcat('\theta= ',(rotFields{n}(strfind(rotFields{n},'_')+1:end))))
    axis equal
    axis tight
    shading interp
    caxis([0,3])
    set(gca,'position',pos{p})
    set(gca,'Visible','off')
    p=p+1;
end
c=colorbar;
set(c,'position',[0.7585    0.0513    0.0180    0.4074])
set(get(c,'title'),'string','$(\frac{V_{mag}}{U_\infty})$','interpreter','latex');
axes(ha(end))
set(gca,'Visible','off')
print(gcf,strcat('velFields',run),'-dpng','-r600')
end
%% mean-subtract and fill in NaNs for SVD
Yavg = mean(Y,2,'omitnan'); %compute row mean for subtraction
Yms =Y-Yavg*ones(1,size(Y,2)); % Y mean-subtracted
Yms(isnan(Yms))=0; %replace NaN

%Remove values where the number of NaN in that row is greater than the
%threshold
Ynan = ismissing(Y);
nanRow = sum(Ynan,2); % number of NaNs in each row
th = 4; % threshold for number of NaNs allowed before row is masked
Yms(nanRow>th,:)=[];

% subplot(1,2,2)
% imagesc(Yfill)
% title('Mean-subtracted, NaNs filled in')

[U,S,V] = svd(Yms,'econ');
sig=diag(S);
energy=sig/sum(sig)*100;
for n=1:length(sig)
    energytotal(n)=sum(energy(1:n));
end
figure
pcolor(V)
if uv
    print(gcf,strcat('Vuv matrix',run),'-dpng','-r600')
else
    print(gcf,strcat('Vvmag matrix',run),'-dpng','-r600')
end

figure
set(gcf,'position',[227.3000  403.9000  720.5571  316.1000])
left_color = [0.9153    0.2816    0.2878];
right_color = [0 .5 .5];
set(gcf,'defaultAxesColorOrder',[left_color; right_color]);
yyaxis left
a=plot(energy,'o','markerfacecolor',left_color);
hold on
ind=find(energytotal>=90,1);
plot(ind,energy(ind),'o','markerfacecolor',[0 0 0],'markersize',12)
ylabel('% of energy')
axis tight
yyaxis right
plot(energytotal,'o','markerfacecolor',right_color)
hold on
plot(linspace(1,length(sig),100),90*ones(1,100),'--k','linewidth',1.75)
ylabel('% of Energy Captured')
xlabel('mode')
% set(gca, 'SortMethod', 'depth')
axis tight
grid on
print(gcf,strcat('Energy Cropped',run),'-dpng','-r600')

%% show modes
%put NaNs back in
Ureplaced=zeros(size(Y));
Ureplaced(nanRow>th,:)=NaN;
Ureplaced(~(nanRow>th),:)=U;

f=figure;
set(f,'position',[331.8571   13.5714  822.8571  706.4286])
[ha, pos]= tight_subplot(3,2,[.05 .15],[.1 .01],[.1 .1]);
f2=figure;
set(f2,'position',[331.8571   13.5714  822.8571  706.4286])
[ha2, pos2]= tight_subplot(3,2,[.05 .15],[.1 .01],[.1 .1]);
for k = 1:6
    f
    axes(ha(k))
    %Put NaNs back in
    if uv
        mode=Ureplaced(1:end/2,k);
        mode=mode/max(mode,[],'all');
        mode2=Ureplaced(end/2+1:end,k);
        mode2=mode2/max(mode2,[],'all');
        titletext='u modes';
        titletext2='v modes';
    else
        mode=Ureplaced(:,k);
        mode=mode/max(mode,[],'all');
        titletext='vmag modes';
    end
    pcolor(xcrop,ycrop,reshape(mode, [nx ny]))
    hold on
    plot(data.deg_48.interp.foil,'facecolor',[0 0 0],'facealpha',0.5...
        ,'edgecolor','none')
    title(strcat('mode ', num2str(k)))
    xlabel('x/c')
    ylabel('y/c')
    shading interp
    axis equal
    axis tight
    colorbar
    set(gca,'position',pos{k})
    
    if uv
        f2
        axes(ha2(k))
        pcolor(xcrop,ycrop,reshape(mode2, [nx ny]))
        hold on
        plot(data.deg_48.interp.foil,'facecolor',[0 0 0],'facealpha',0.5...
            ,'edgecolor','none')
        title(strcat('mode ', num2str(k)))
        xlabel('x/c')
        ylabel('y/c')
        shading interp
        axis equal
        axis tight
        colorbar
        set(gca,'position',pos2{k})
    end
end
print(f,strcat(titletext,run),'-dpng','-r600')
if uv
   print(f2,strcat(titletext2,run),'-dpng','-r600')
end
%% Reconstruct Each Angle 
if ~uv
figure
set(gcf,'position',1.0e+03 *[0.0016    0.2079    1.4600    0.5120])
[ha, pos]= tight_subplot(2,4,[0 0],[.01 .01],[.01 .01]);
p=1;
indRecon=ceil(size(Ureplaced,2)/2); %Reconstructs with 50 perc. of the modes
% indRecon=ind; %Recontructs with 90 perc. of the energy
for n=1:ceil(nRot/8):nRot
    axes(ha(p))
    ax=gca;
    %Reconstruct and add mean back
    tmpVmag=Ureplaced(:,1:indRecon)*S(1:indRecon,1:indRecon)*V(n,1:indRecon)'+Yavg;
    pcolor(data.(rotFields{n}).interp.xcrop,data.(rotFields{n}).interp.ycrop...
        ,reshape(tmpVmag, [nx ny]))
    hold on
    plot(data.(rotFields{n}).interp.foil,'facecolor',[0 0 0],'facealpha',0.5...
        ,'edgecolor','none')
    ax.XAxis.Visible='off';
    ax.YAxis.Visible='off';
    title(strcat('\theta= ',rotFields{n}(strfind(rotFields{n},'_')+1:end)))
    axis equal
    axis tight
    shading interp
    caxis([0 3])
    set(gca,'position',pos{p})
    p=p+1;
end
print(gcf,strcat('velFieldsReconstruct',run),'-dpng','-r600')
end
